{"version":3,"sources":["media/Leapfrog.ogg","components/utils.js","components/SingleTimer/TitleBar.js","components/SingleTimer/TimeButtons.js","components/SingleTimer/FullTimer.js","components/SearchBar/AddTimerBtn.js","components/SearchBar/SearchBar.js","App.js","index.js"],"names":["getIdName","id","substring","lastIndexOf","parseTime","input","onlySeconds","getMidNight","time","Date","durationSeconds","getHours","getMinutes","getSeconds","setSeconds","setHours","TitleBar","props","removeTimer","className","IconButton","color","onClick","localStorage","removeItem","TimeButtons","pause","resume","restart","isRunning","clockValues","every","e","Boolean","utils","FullTimer","expiryTimestamp","updateTimeoutSeconds","isHidden","useTimer","autoStart","onExpire","Swal","close","audio","Audio","audioURL","loop","play","fire","title","icon","then","seconds","minutes","hours","useState","inputStorage","getItem","JSON","parse","toString","setInput","useEffect","setItem","stringify","TimerBody","map","item","index","length","LocalizationProvider","dateAdapter","AdapterDateFns","TimePicker","ampm","ampmInClock","views","inputFormat","mask","value","onChange","newValue","renderInput","params","TextField","onKeyDown","event","key","AddTimerBtn","createTimer","style","backgroundColor","margin","padding","borderRadius","fontFamily","fontSize","cursor","styled","theme","position","shape","alpha","palette","common","white","marginLeft","width","paddingRight","spacing","height","pointerEvents","display","alignItems","justifyContent","InputBase","paddingLeft","transition","transitions","create","App","timerStorage","getStorage","timerList","setTimerList","InputFilter","a","inputValidator","result","timeoutSeconds","timer","toLocaleLowerCase","includes","filter","t","newList","timerIndex","findIndex","obj","timeChange","reactDom","render","document","getElementById"],"mappings":"+QAAe,MAA0B,qC,iBCGlC,SAASA,EAAUC,GACxB,OAAOA,EAAGC,UAAU,EAAGD,EAAGE,YAAY,MAmBjC,SAASC,EAAUC,EAAOC,GAC/B,IAAKD,GAAmB,OAAVA,EAAgB,OAAOE,IACrC,IAAIC,EAAO,IAAIC,KACXC,EACFL,EAAMM,WAAN,SAAmB,GAAM,GAAyB,GAArBN,EAAMO,aAAoBP,EAAMQ,aAC/D,OAAIP,EAAoBI,EAEnBA,GACLF,EAAKM,WAAWN,EAAKK,aAAeH,GAC7BF,GAFsB,KAK/B,SAASD,IAEP,IAAMC,EAAO,IAAIC,KAEjB,OADAD,EAAKO,SAAS,EAAG,EAAG,EAAG,GAChBP,E,WCnCM,SAASQ,EAASC,GAC/B,IAAQhB,EAAoBgB,EAApBhB,GAAIiB,EAAgBD,EAAhBC,YACZ,OACE,sBAAKC,UAAU,YAAf,UACE,6BAAKnB,EAAUC,KACf,cAACmB,EAAA,EAAD,CAEE,aAAW,SACXC,MAAM,UACNC,QAAS,WACPC,aAAaC,WAAb,gBAAiCvB,IACjCiB,KANJ,SASE,cAAC,IAAD,SCZO,SAASO,EAAYR,GAClC,IAAQS,EAA0DT,EAA1DS,MAAOC,EAAmDV,EAAnDU,OAAQC,EAA2CX,EAA3CW,QAASC,EAAkCZ,EAAlCY,UAAWC,EAAuBb,EAAvBa,YAAazB,EAAUY,EAAVZ,MACxD,OACE,sBAAKc,UAAU,UAAf,UACE,cAACC,EAAA,EAAD,CAEEE,QAAS,WACP,GAAKO,IASHH,SARA,GAAKI,IAAcC,OAAM,SAACC,GAAD,OAAOC,QAAQD,MAKtCL,QAL2C,CAC3C,IAAInB,EAAO0B,EAAgB7B,KAC3B,IAAKG,EAAM,OACXoB,EAAQpB,KAPhB,SAgBIqB,IAEF,wBAAQV,UAAU,WAAlB,oBADA,wBAAQA,UAAU,WAAlB,qBAGF,cAACC,EAAA,EAAD,CAEEE,QAAS,WACP,IAAId,EAAO0B,EAAgB7B,KAC3BuB,EAAQpB,GACRkB,KALJ,SASE,wBAAQP,UAAU,UAAlB,wB,MC5BO,SAASgB,EAAUlB,GAChC,IAAMmB,EACJnB,EADImB,gBAAiBC,EACrBpB,EADqBoB,qBAAsBnB,EAC3CD,EAD2CC,YAAajB,EACxDgB,EADwDhB,GAAIqC,EAC5DrB,EAD4DqB,SAG9D,EACEC,mBAAS,CACPC,WAAW,EACXJ,kBACAK,SAAU,WACR,IAAIjC,EAAO0B,EAAgB7B,GAC3BuB,EAAQpB,GACRkB,IHfD,SAAmBzB,GACxByC,IAAKC,QACL,IAAIC,EAAQ,IAAIC,MAAMC,GACtBF,EAAMG,MAAO,EACbH,EAAMI,OACNN,IAAKO,KAAK,CAAEC,MAAM,GAAD,OAAKlD,EAAUC,GAAf,UAA4BkD,KAAM,YAAaC,MAAK,WACnER,EAAMG,MAAO,EACbH,EAAMlB,WGSFQ,CAAgBjC,MARdoD,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,MAAO1B,EAAjC,EAAiCA,UAAWH,EAA5C,EAA4CA,MAAOC,EAAnD,EAAmDA,OAAQC,EAA3D,EAA2DA,QAYrDE,EAAc,CAACyB,EAAOD,EAASD,GAErC,EAA0BG,mBHarB,SAAyBvD,GAC9B,IAAIwD,EAAelC,aAAamC,QAAb,gBAA8BzD,IACjD,MAAqB,SAAjBwD,GAA4BA,EAGzB,IAAIhD,KAAKkD,KAAKC,MAAMH,EAAaI,aAF/BtD,IGhB0B2B,CAAsBjC,IAAzD,mBAAOI,EAAP,KAAcyD,EAAd,KAWA,GATAC,qBAAU,WACRxC,aAAayC,QAAb,gBAA8B/D,GAAM0D,KAAKM,UAAU5D,IACnDgC,EAAqBH,EAAgB7B,GAAO,IAC5C,IAAIG,EAAO0B,EAAgB7B,GAC3BuB,EAAQpB,GACRkB,MAEC,CAACrB,IAEAiC,EAAU,OAAO,6BAErB,SAAS4B,IACP,OACE,sBAAK/C,UAAU,gBAAf,UACE,qBAAKA,UAAU,eAAf,SACGW,EAAYqC,KAAI,SAACC,EAAMC,GAAP,OACf,qCACE,8BAAMD,EAAO,GAAP,WAAgBA,GAASA,IAC9BC,IAAUvC,EAAYwC,OAAS,EAAI,GAAK,YAI/C,cAAC7C,EAAD,CACEC,MAAO,kBAAMA,KACbC,OAAQ,kBAAMA,KACdC,QAAS,SAACpB,GAAD,OAAUoB,EAAQpB,IAC3BqB,UAAW,kBAAMA,GACjBC,YAAa,kBAAMA,GACnBzB,MAAO,kBAAMA,QAMrB,OACE,0BAASc,UAAU,UAAnB,UACE,cAACH,EAAD,CAAUf,GAAIA,EAAIiB,YAAaA,IAC/B,cAACqD,EAAA,EAAD,CAAsBC,YAAaC,IAAnC,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,EACNC,aAAa,EACbC,MAAO,CAAC,QAAS,UAAW,WAC5BC,YAAY,WACZC,KAAK,WAELC,MAAO3E,EACP4E,SAAU,SAACC,GACTpB,EAASoB,IAEXC,YAAa,SAACC,GAAD,OACT,cAACC,EAAA,EAAD,aAEAC,UAAW,SAACC,GACV,GAAkB,UAAdA,EAAMC,IAAiB,CACzB,IAAIhF,EAAO0B,EAAgB7B,GAC3BuB,EAAQpB,MAGR4E,SAKZ,cAAClB,EAAD,O,+EC1FS,SAASuB,EAAYxE,GAClC,IAAQyE,EAAgBzE,EAAhByE,YAWR,OACE,mCACE,wBACEpE,QAAS,WACPoE,KAEFC,MAhBW,CACfC,gBAAiB,UACjBC,OAAQ,OACRxE,MAAO,QACPyE,QAAS,8BACTC,aAAc,MACdC,WAAY,UACZC,SAAU,OACVC,OAAQ,WAIN,gCCRSC,YAAO,MAAPA,EAAc,gBAAGC,EAAH,EAAGA,MAAH,MAAgB,CAC3CC,SAAU,WACVN,aAAcK,EAAME,MAAMP,aAC1BH,gBAAiBW,YAAMH,EAAMI,QAAQC,OAAOC,MAAO,GACnDC,WAAY,EACZC,MAAO,WAGiBT,YAAO,MAAPA,EAAc,kBAAgB,CACtDU,aADsC,EAAGT,MACrBU,QAAQ,GAC5BC,OAAQ,OACRV,SAAU,WACVW,cAAe,OACfC,QAAS,OACTC,WAAY,SACZC,eAAgB,aAGMhB,YAAOiB,IAAPjB,EAAkB,gBAAGC,EAAH,EAAGA,MAAH,MAAgB,CACxD/E,MAAO,UACPuF,MAAO,OACP,wBAAyB,CACvBd,QAASM,EAAMU,QAAQ,EAAG,EAAG,EAAG,GAEhCO,YAAY,cAAD,OAAgBjB,EAAMU,QAAQ,GAA9B,KACXQ,WAAYlB,EAAMmB,YAAYC,OAAO,SACrCZ,MAAO,YC3BI,SAASa,IAStB,MAAkCjE,mBAWlC,WACE,IAAIkE,EAAenG,aAAamC,QAAQ,aACxC,OAAKgE,GAAgBA,IAAiB,GAC/B/D,KAAKC,MAAM8D,EAAa7D,YADkB,GAbR8D,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCrE,mBAAS,IAA/C,mBAAOsE,EAAP,UAV4B,4CA0B5B,sBAAAC,EAAA,sEACQrF,IAAKO,KAAK,CACdC,MAAO,qBACP7C,MAAO,OACP2H,eAAgB,SAAChD,GACf,IAAKA,EAAO,MAAO,kCAEpB5B,MAAK,SAAC6E,GACFA,EAAOjD,OACZ6C,GAAa,SAACD,GAAD,4BACRA,GADQ,CAEX,CACEM,eAAgB,EAChBjI,GAAG,GAAD,OAAKgI,EAAOjD,MAAZ,YAAqB4C,EAAUtD,QACjClC,gBAAiB,WAdzB,4CA1B4B,sBAgG5B,OAZA2B,qBAAU,WACRxC,aAAayC,QAAQ,YAAaL,KAAKM,UAAU2D,MAChD,CAACA,IAWF,sBAAK3H,GAAG,OAAR,UAME,cAACwF,EAAD,CAAaC,YAvGW,6CAwGvBkC,EAAUzD,KAAI,SAACgE,GAAD,OACb,cAAChG,EAAD,CAEElC,GAAIkI,EAAMlI,GACVqC,UACG6F,EAAMlI,GACJC,UAAU,EAAGiI,EAAMlI,GAAGE,YAAY,MAClCiI,oBACAC,SAASP,EAAYM,qBAE1BhG,gBAAiB+F,EAAM/F,gBACvBlB,YAAa,kBAnCrB,SAAqBiH,GACnBN,GAAa,SAACD,GAAD,OAAeA,EAAUU,QAAO,SAACC,GAAD,OAAOA,EAAEtI,KAAOkI,EAAMlI,SAkC1CiB,CAAYiH,IAC/B9F,qBAAsB,SAACgB,GAAD,OAtE9B,SAAoB8E,EAAO9E,GACzB,IAAImF,EAAO,YAAOZ,GACZa,EAAaD,EAAQE,WAAU,SAACC,GACpC,OAAOA,EAAI1I,KAAOkI,EAAMlI,MAE1BuI,EAAQC,GAAYP,eAAiB7E,EACrCwE,EAAaW,GAgE4BI,CAAWT,EAAO9E,KAVhD8E,EAAMlI,UChHrB4I,IAASC,OAAO,cAACrB,EAAD,IAASsB,SAASC,eAAe,U","file":"static/js/main.6357a0a0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Leapfrog.00b4adbd.ogg\";","import audioURL from \"../media/Leapfrog.ogg\";\nimport Swal from \"sweetalert2\";\n\nexport function getIdName(id) {\n  return id.substring(0, id.lastIndexOf(\" \"));\n}\n\nexport function playAudio(id) {\n  Swal.close();\n  let audio = new Audio(audioURL);\n  audio.loop = true;\n  audio.play();\n  Swal.fire({ title: `${getIdName(id)}'s off`, icon: \"warning\" }).then(() => {\n    audio.loop = false;\n    audio.pause();\n  });\n}\n\n/**\n * @param {Date} input - current value of TimePicker Component\n * @param {boolean} onlySeconds - if true, parseTime return time in seconds\n * @returns {Date|number}\n */\nexport function parseTime(input, onlySeconds) {\n  if (!input || input === null) return getMidNight();\n  let time = new Date();\n  let durationSeconds =\n    input.getHours() * 60 ** 2 + input.getMinutes() * 60 + input.getSeconds();\n  if (onlySeconds) return durationSeconds;\n  // if the timer is set to 00:00:00\n  if (!durationSeconds) return null;\n  time.setSeconds(time.getSeconds() + durationSeconds);\n  return time;\n}\n\nfunction getMidNight() {\n  // workaround to get 00:00:00 at timer's creation\n  const time = new Date();\n  time.setHours(0, 0, 0, 0);\n  return time;\n}\n\nexport function getInputStorage(id) {\n  let inputStorage = localStorage.getItem(`input ${id}`);\n  if (inputStorage === \"null\" || !inputStorage) {\n    return getMidNight();\n  }\n  return new Date(JSON.parse(inputStorage.toString()));\n}\n","import { IconButton } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { getIdName } from \"../utils\";\n\nexport default function TitleBar(props) {\n  const { id, removeTimer } = props;\n  return (\n    <div className=\"title-bar\">\n      <h2>{getIdName(id)}</h2>\n      <IconButton\n        // style={{ color: \"white\" }}\n        aria-label=\"delete\"\n        color=\"default\"\n        onClick={() => {\n          localStorage.removeItem(`input ${id}`);\n          removeTimer();\n        }}\n      >\n        <DeleteIcon />\n      </IconButton>\n    </div>\n  );\n}\n","import { IconButton } from \"@material-ui/core\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport PauseIcon from \"@material-ui/icons/Pause\";\nimport ReplayIcon from \"@material-ui/icons/Replay\";\nimport * as utils from \"../utils\";\n\nexport default function TimeButtons(props) {\n  const { pause, resume, restart, isRunning, clockValues, input } = props;\n  return (\n    <div className=\"buttons\">\n      <IconButton\n        // style={{ color: \"white\" }}\n        onClick={() => {\n          if (!isRunning()) {\n            if (!clockValues().every((e) => Boolean(e))) {\n              let time = utils.parseTime(input());\n              if (!time) return;\n              restart(time);\n            } else {\n              resume();\n            }\n          } else {\n            pause();\n          }\n        }}\n      >\n        {!isRunning() ? \n        <button className='dark-btn'>START</button> : \n        <button className='dark-btn'>RESUME</button>}\n      </IconButton>\n      <IconButton\n        // style={{ color: \"white\" }}\n        onClick={() => {\n          let time = utils.parseTime(input());\n          restart(time);\n          pause();\n        }}\n      >\n        {/*<ReplayIcon />*/}\n        <button className='red-btn'>RESET</button>\n      </IconButton>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useTimer } from \"react-timer-hook\";\nimport { TextField } from \"@material-ui/core\";\nimport AdapterDateFns from \"@material-ui/lab/AdapterDateFns\";\nimport LocalizationProvider from \"@material-ui/lab/LocalizationProvider\";\nimport TimePicker from \"@material-ui/lab/TimePicker\";\nimport TitleBar from \"./TitleBar\";\nimport TimeButtons from \"./TimeButtons\";\nimport * as utils from \"../utils\";\nimport \"../../index.css\";\n\nexport default function FullTimer(props) {\n  let { expiryTimestamp, updateTimeoutSeconds, removeTimer, id, isHidden } =\n    props;\n\n  const { seconds, minutes, hours, isRunning, pause, resume, restart } =\n    useTimer({\n      autoStart: false,\n      expiryTimestamp,\n      onExpire: () => {\n        let time = utils.parseTime(input);\n        restart(time);\n        pause();\n        utils.playAudio(id);\n      },\n    });\n\n  const clockValues = [hours, minutes, seconds];\n\n  const [input, setInput] = useState(utils.getInputStorage(id));\n\n  useEffect(() => {\n    localStorage.setItem(`input ${id}`, JSON.stringify(input));\n    updateTimeoutSeconds(utils.parseTime(input, true));\n    let time = utils.parseTime(input);\n    restart(time);\n    pause();\n    // eslint-disable-next-line\n  }, [input]);\n\n  if (isHidden) return <></>;\n\n  function TimerBody() {\n    return (\n      <div className=\"clock buttons\">\n        <div className=\"actual-timer\">\n          {clockValues.map((item, index) => (\n            <>\n              <div>{item < 10 ? `0${item}` : item}</div>\n              {index === clockValues.length - 1 ? \"\" : \":\"}\n            </>\n          ))}\n        </div>\n        <TimeButtons\n          pause={() => pause()}\n          resume={() => resume()}\n          restart={(time) => restart(time)}\n          isRunning={() => isRunning}\n          clockValues={() => clockValues}\n          input={() => input}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <section className=\"wrapper\">\n      <TitleBar id={id} removeTimer={removeTimer} />\n      <LocalizationProvider dateAdapter={AdapterDateFns}>\n        <TimePicker\n          ampm={false}\n          ampmInClock={false}\n          views={[\"hours\", \"minutes\", \"seconds\"]}\n          inputFormat=\"HH:mm:ss\"\n          mask=\"__:__:__\"\n          /*label=\"INSERT TIME HERE\"*/\n          value={input}\n          onChange={(newValue) => {\n            setInput(newValue);\n          }}\n          renderInput={(params) => (\n              <TextField\n              // style={{ color: \"white\" }}\n              onKeyDown={(event) => {\n                if (event.key === \"Enter\") {\n                  let time = utils.parseTime(input);\n                  restart(time);\n                }\n              }}\n              {...params}\n            />\n          )}\n        />\n      </LocalizationProvider>\n      <TimerBody />\n    </section>\n  );\n}\n","import { IconButton } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { fontFamily } from \"@material-ui/system\";\n\nexport default function AddTimerBtn(props) {\n  const { createTimer } = props;\n  const blackBtn = {\n    backgroundColor: '#1a1a1a',\n    margin: '40px',\n    color: 'white',\n    padding: '0.5rem 1.1rem 0.5rem 1.1rem',\n    borderRadius: '7px',\n    fontFamily: 'cursive',\n    fontSize: '20px',\n    cursor: 'pointer'\n  };\n  return (\n    <>\n      <button\n        onClick={() => {\n          createTimer();\n        }}\n        style={blackBtn}\n      >Create a new one\n        {/*<AddIcon style={{ color: \"black\" }} />*/}\n      </button>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\r\nimport { styled, alpha } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport SortButton from \"./SortButton\";\r\nimport AddTimerBtn from \"./AddTimerBtn\";\r\n\r\nconst Search = styled(\"div\")(({ theme }) => ({\r\n  position: \"relative\",\r\n  borderRadius: theme.shape.borderRadius,\r\n  backgroundColor: alpha(theme.palette.common.white, 0.0),\r\n  marginLeft: 0,\r\n  width: \"100%\",\r\n}));\r\n\r\nconst SearchIconWrapper = styled(\"div\")(({ theme }) => ({\r\n  paddingRight: theme.spacing(1),\r\n  height: \"100%\",\r\n  position: \"absolute\",\r\n  pointerEvents: \"none\",\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n}));\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  color: \"inherit\",\r\n  width: \"100%\",\r\n  \"& .MuiInputBase-input\": {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n    transition: theme.transitions.create(\"width\"),\r\n    width: \"100%\",\r\n  },\r\n}));\r\n\r\nexport default function SearchBar(props) {\r\n  const { createTimer, changeInputFilter, sortList } = props;\r\n  const [inputFilter, setinputFilter] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    changeInputFilter(inputFilter);\r\n    // eslint-disable-next-line\r\n  }, [inputFilter]);\r\n  return (\r\n    <Box sx={{ flexGrow: 1, width: \"100%\" }}>\r\n      <AppBar position=\"static\">\r\n          <Toolbar>\r\n          <SortButton\r\n            sortList={(sortMethod) => {\r\n              sortList(sortMethod);\r\n            }}\r\n          />\r\n            <Search>\r\n            <SearchIconWrapper>\r\n              <SearchIcon />\r\n            </SearchIconWrapper>\r\n            <StyledInputBase\r\n              onChange={(event) => setinputFilter(event.target.value)}\r\n              placeholder=\"Search…\"\r\n              inputProps={{ \"aria-label\": \"search\" }}\r\n              onKeyDown={(event) => {\r\n                if (event.key === \"Escape\") {\r\n                  event.target.value = \"\";\r\n                  setinputFilter(\"\");\r\n                }\r\n              }}\r\n            />\r\n          </Search>\r\n          <AddTimerBtn createTimer={createTimer} />\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Box>\r\n  );\r\n}","// import FullTimer from \"./components/FullTimer\";\n// import NavBar from \"./components/NavBar\";\nimport FullTimer from \"./components/SingleTimer/FullTimer\";\nimport SearchBar from './components/SearchBar/SearchBar';\nimport AddTimerBtn from './components/SearchBar/AddTimerBtn';\nimport React, { useEffect, useState } from \"react\";\nimport Swal from \"sweetalert2\";\nimport \"./index.css\";\n\nexport default function App() {\n  // ************************************************************************ //\n\n  // ********************* //\n  // *** STATES *** //\n  // ********************* //\n\n  // ************************************************************************ //\n\n  const [timerList, setTimerList] = useState(getStorage());\n  const [InputFilter, setInputFilter] = useState(\"\");\n\n  // ************************************************************************ //\n\n  // *********************   //\n  // *** STATES MODIFIER *** //\n  // *********************   //\n\n  // ************************************************************************ //\n\n  function getStorage() {\n    let timerStorage = localStorage.getItem(\"timerList\");\n    if (!timerStorage || timerStorage === []) return [];\n    return JSON.parse(timerStorage.toString());\n  }\n\n  async function createTimer() {\n    await Swal.fire({\n      title: \"Enter timer's name\",\n      input: \"text\",\n      inputValidator: (value) => {\n        if (!value) return \"You need to write something!\";\n      },\n    }).then((result) => {\n      if (!result.value) return;\n      setTimerList((timerList) => [\n        ...timerList,\n        {\n          timeoutSeconds: 0,\n          id: `${result.value} ${timerList.length}`,\n          expiryTimestamp: 0,\n        },\n      ]);\n    });\n  }\n\n  function timeChange(timer, seconds) {\n    let newList = [...timerList];\n    const timerIndex = newList.findIndex((obj) => {\n      return obj.id === timer.id;\n    });\n    newList[timerIndex].timeoutSeconds = seconds;\n    setTimerList(newList);\n  }\n\n  function sortTimerList(sortMethod) {\n    let sorted = \"\";\n    switch (sortMethod) {\n      case \"A-Z\":\n        sorted = [...timerList].sort((a, b) => a.id.localeCompare(b.id));\n        break;\n      case \"Z-A\":\n        sorted = [...timerList].sort((a, b) => b.id.localeCompare(a.id));\n        break;\n      case \"time-up\":\n        sorted = [...timerList].sort(\n          (a, b) => a.timeoutSeconds - b.timeoutSeconds\n        );\n        break;\n      case \"time-down\":\n        sorted = [...timerList].sort(\n          (a, b) => b.timeoutSeconds - a.timeoutSeconds\n        );\n        break;\n      default:\n        return null;\n    }\n    setTimerList(sorted);\n  }\n\n  function removeTimer(timer) {\n    setTimerList((timerList) => timerList.filter((t) => t.id !== timer.id));\n  }\n\n  useEffect(() => {\n    localStorage.setItem(\"timerList\", JSON.stringify(timerList));\n  }, [timerList]);\n\n  // ************************************************************************ //\n\n  // ********************* //\n  // *** HTML STRUCTURE *** //\n  // ********************* //\n\n  // ************************************************************************ //\n\n  return (\n    <div id=\"main\">\n      {/*<Searchbar\n        createTimer={() => createTimer()}\n        changeInputFilter={(event) => setInputFilter(event)}\n        sortList={(sortMethod) => sortTimerList(sortMethod)}\n      />*/}\n      <AddTimerBtn createTimer={createTimer} />\n      {timerList.map((timer) => (\n        <FullTimer\n          key={timer.id}\n          id={timer.id}\n          isHidden={\n            !timer.id\n              .substring(0, timer.id.lastIndexOf(\" \"))\n              .toLocaleLowerCase() // id without index\n              .includes(InputFilter.toLocaleLowerCase())\n          }\n          expiryTimestamp={timer.expiryTimestamp}\n          removeTimer={() => removeTimer(timer)}\n          updateTimeoutSeconds={(seconds) => timeChange(timer, seconds)}\n        />\n      ))}\n    </div>\n  );\n}\n","import reactDom from \"react-dom\";\nimport App from \"./App\";\n\nreactDom.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}